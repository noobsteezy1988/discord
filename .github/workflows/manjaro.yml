name: Create Max-Spec SSH-accessible VPS

on: [workflow_dispatch]

jobs:
  create-vps:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Set up SSH
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-server
          sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sudo service ssh restart
          
          # Set the SSH password for the runner user
          echo "runner:${{ secrets.SSH_PASSWORD }}" | sudo chpasswd
          sudo usermod -aG sudo runner
          echo "runner ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers

      - name: Install and setup Playit
        run: |
          curl -SsL https://playit-cloud.github.io/ppa/key.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/playit.gpg >/dev/null
          echo "deb [signed-by=/etc/apt/trusted.gpg.d/playit.gpg] https://playit-cloud.github.io/ppa/data ./" | sudo tee /etc/apt/sources.list.d/playit-cloud.list
          sudo apt update
          sudo apt install -y playit
          
          # Start Playit with TCP tunnel on port 5901
          nohup playit tcp 5901 > playit.log 2>&1 &
          sleep 10  # Give Playit some time to start and generate the URL
          
          # Extract the Playit URL
          PLAYIT_URL=$(grep -o 'https://[^ ]*' playit.log | head -1)
          echo "PLAYIT_URL=$PLAYIT_URL" >> $GITHUB_OUTPUT

      - name: Get system information
        id: sysinfo
        run: |
          echo "PUBLIC_IP=$(curl -s https://api.ipify.org)" >> $GITHUB_OUTPUT
          echo "CPU_INFO=$(lscpu | grep 'Model name' | cut -f 2 -d ":")" >> $GITHUB_OUTPUT
          echo "CPU_CORES=$(nproc)" >> $GITHUB_OUTPUT
          echo "RAM_TOTAL=$(free -h | awk '/^Mem:/ {print $2}')" >> $GITHUB_OUTPUT
          echo "DISK_TOTAL=$(df -h / | awk 'NR==2 {print $2}')" >> $GITHUB_OUTPUT
          echo "DISK_AVAIL=$(df -h / | awk 'NR==2 {print $4}')" >> $GITHUB_OUTPUT

      # ... (rest of the workflow remains the same)

      - name: Display connection info and system specs
        run: |
          echo "Max-Spec VPS is ready. Connection details and specs:"
          echo "Public IP: ${{ steps.sysinfo.outputs.PUBLIC_IP }}"
          echo "SSH command: ssh runner@${{ steps.ngrok.outputs.NGROK_URL }}"
          echo "Password: ${{ secrets.SSH_PASSWORD }}"
          echo "Playit URL: ${{ steps.playit.outputs.PLAYIT_URL }}"
          echo "CPU: ${{ steps.sysinfo.outputs.CPU_INFO }}"
          echo "CPU Cores: ${{ steps.sysinfo.outputs.CPU_CORES }}"
          echo "Total RAM: ${{ steps.sysinfo.outputs.RAM_TOTAL }}"
          echo "Total Disk: ${{ steps.sysinfo.outputs.DISK_TOTAL }}"
          echo "Available Disk: ${{ steps.sysinfo.outputs.DISK_AVAIL }}"
          echo "The user 'runner' has sudo privileges."

      # ... (rest of the workflow remains the same)

      - name: Keep alive
        run: |
          while true; do
            echo "Max-Spec VPS is running. Connection details:"
            echo "Public IP: ${{ steps.sysinfo.outputs.PUBLIC_IP }}"
            echo "SSH command: ssh runner@${{ steps.ngrok.outputs.NGROK_URL }}"
            echo "Password: ${{ secrets.SSH_PASSWORD }}"
            echo "Playit URL: ${{ steps.playit.outputs.PLAYIT_URL }}"
            echo "CPU: ${{ steps.sysinfo.outputs.CPU_INFO }}"
            echo "CPU Cores: ${{ steps.sysinfo.outputs.CPU_CORES }}"
            echo "Total RAM: ${{ steps.sysinfo.outputs.RAM_TOTAL }}"
            echo "Total Disk: ${{ steps.sysinfo.outputs.DISK_TOTAL }}"
            echo "Available Disk: ${{ steps.sysinfo.outputs.DISK_AVAIL }}"
            echo "The user 'runner' has sudo privileges."
            sleep 300
          done
